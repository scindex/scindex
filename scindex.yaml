# Software Component Index (scindex)
# Edit this "source of truth" file to maintain the index.
# Run `python compiler.py` to export to JSON, TOML, etc.

scindex_version: "0.2.0"
divisions:
  - id: "D"
    name: "DATA MANAGEMENT"
    description: "This division is dedicated to how data is stored, retrieved, structured, and managed."
    sections:
      - id: "01"
        name: "Databases"
        description: "Covers systems for storing, retrieving, and managing structured and unstructured data, including relational, NoSQL, time-series, and graph databases."
        items:
          - id: "10"
            name: "Relational Databases"
            description: "Databases using a structured, table-based format with rows and columns, enforcing ACID properties. Ideal for transactional data and complex queries."
            examples: ["PostgreSQL", "MySQL"]
          - id: "20"
            name: "NoSQL Databases"
            description: "Databases providing flexible data models (key-value, document, columnar, etc.). They excel at handling large-scale, unstructured data and horizontal scaling."
            examples: ["MongoDB", "DynamoDB"]
          - id: "30"
            name: "Time-Series Databases"
            description: "Databases optimized for storing and querying time-stamped data points, such as metrics, sensor readings, and financial data. High-performance for time-based analysis."
            examples: ["InfluxDB"]
          - id: "40"
            name: "Graph Databases"
            description: "Databases that use graph structures with nodes, edges, and properties to represent and store data. Ideal for managing highly connected data and complex relationships."
            examples: ["Neo4j"]
      - id: "02"
        name: "Caching"
        description: "Focuses on temporary data storage to reduce latency. Includes in-memory caches for rapid access, CDNs for distributed content, and client-side caching to improve user experience."
        items:
          - id: "10"
            name: "In-Memory Caches"
            description: "Data stores that keep frequently accessed data in RAM for extremely fast retrieval, reducing latency and load on primary databases or services."
            examples: ["Redis", "Memcached"]
          - id: "20"
            name: "Content Delivery Networks (CDN)"
            description: "Geographically distributed networks of proxy servers that cache content close to users, accelerating the delivery of web assets and reducing latency."
            examples: ["Cloudflare", "Akamai", "Fastly"]
          - id: "30"
            name: "Client-Side Caching"
            description: "Storing data directly on the user's device (e.g., in a web browser) to speed up repeat visits, reduce network requests, and enable offline functionality."
            examples: ["Browser Cache", "Service Worker Cache"]
      - id: "03"
        name: "Storage Systems & Abstractions"
        description: "Deals with underlying storage tech and access patterns. Covers object/block storage, file systems, and ORMs that bridge application code and relational databases."
        items:
          - id: "10"
            name: "Object Storage"
            description: "A system for storing large amounts of unstructured data as objects in a flat address space. Highly scalable and durable, accessed via APIs."
            examples: ["S3", "Google Cloud Storage"]
          - id: "20"
            name: "Block Storage & File Systems"
            description: "Systems that manage data as blocks within sectors and tracks, abstracted by a file system (e.g., ext4, NTFS) for hierarchical organization and access."
            examples: ["ext4", "NTFS", "APFS", "Amazon EBS"]
          - id: "30"
            name: "Object-Relational Mappers (ORM)"
            description: "Libraries that provide an abstraction layer to convert data between object-oriented programming languages and relational databases, simplifying data access."
            examples: ["SQLAlchemy", "Hibernate", "Entity Framework"]
      - id: "04"
        name: "Data Structure & Integrity"
        description: "Defines data structure, serialization, and validation. Covers schemas, migrations, data formats, and integrity checks like hashing and error correction to ensure data quality."
        items:
          - id: "10"
            name: "Database Schemas & Migrations"
            description: "The formal definition of a database's structure (schema) and the version-controlled scripts (migrations) used to manage its evolution over time."
            examples: ["Alembic", "Flyway", "Liquibase"]
          - id: "20"
            name: "Data Serialization Formats"
            description: "Standardized formats for converting data structures into a format that can be stored or transmitted and reconstructed later. Essential for APIs and configuration."
            examples: ["JSON", "XML", "Protocol Buffers"]
          - id: "30"
            name: "Data Validation Schemas & Rules Engines"
            description: "Systems for defining and enforcing rules and constraints on data, ensuring it conforms to a predefined structure and meets business requirements."
            examples: ["JSON Schema", "Schematron"]
          - id: "40"
            name: "Checksums & Hashing"
            description: "Techniques used to verify data integrity. A checksum or hash is computed from data and can be re-checked later to detect accidental alterations or corruption."
            examples: ["CRC32", "SHA-256"]
          - id: "50"
            name: "Error Detection & Correction Codes"
            description: "Algorithms that add redundant data to messages, allowing the receiver to detect and, in some cases, correct errors that occurred during transmission or storage."
            examples: ["Reed-Solomon", "Hamming codes"]
      - id: "05"
        name: "Data Transport & Protocols"
        description: "Encompasses methods for moving data between systems. Covers real-time messaging, high-performance serialization formats, and publish/subscribe communication models."
        items:
          - id: "10"
            name: "Real-Time Messaging Protocols"
            description: "Protocols designed for low-latency, high-throughput communication, often used in IoT, industrial automation, and financial systems for timely data exchange."
            examples: ["DDS", "AMQP", "MQTT"]
          - id: "20"
            name: "Data Marshalling & IPC Formats"
            description: "Formats and protocols for serializing and deserializing data structures for inter-process communication (IPC), enabling different processes to exchange complex data."
            examples: ["Apache Avro", "Thrift", "CORBA"]
          - id: "30"
            name: "Bit-Encoding Formats"
            description: "Highly efficient, low-level data serialization formats that use bit-level encoding to achieve minimal message size and very fast (de)serialization speeds."
            examples: ["SBE", "Google FlatBuffers"]
          - id: "40"
            name: "Data Subscription & Publication Models"
            description: "Communication patterns where message producers (publishers) send messages to channels, and consumers (subscribers) receive them, decoupling senders and receivers."
            examples: ["Pub/Sub", "Observer Pattern"]
      - id: "06"
        name: "In-Memory & Volatile Data"
        description: "Covers data held temporarily in memory. This includes shared memory for IPC, in-process stores for application state, and hardware registers for low-level control."
        items:
          - id: "10"
            name: "Shared Memory Segments"
            description: "A method of inter-process communication (IPC) where multiple processes can access the same region of memory, allowing for very fast data exchange."
            examples: ["POSIX shm", "System V shm", "Windows File Mapping"]
          - id: "20"
            name: "In-Process Data Stores"
            description: "Data structures held within a single process's memory space, used for managing application state, session data, or temporary information without external dependencies."
            examples: ["Session State Objects", "Game State Singletons", "In-Memory Queues"]
          - id: "30"
            name: "Volatile Configuration & Status Registers"
            description: "Low-level hardware registers used to control device operations, configure peripherals, or read status flags. Data is volatile and lost on power-off."
            examples: ["GPIO Control Registers", "DMA Controller Registers", "CPU Flags"]
  - id: "P"
    name: "PLATFORM & INFRASTRUCTURE"
    description: "This division covers the foundational components on which the software operates."
    sections:
      - id: "01"
        name: "Compute"
        description: "Execution environments for code, from virtualized hardware to serverless functions. Covers VMs, containers, bare-metal processors, and specialized hardware accelerators."
        items:
          - id: "10"
            name: "Virtual Machines"
            description: "Emulated computer systems that provide the functionality of a physical computer. They run on a hypervisor and allow multiple OS instances on a single machine."
            examples: ["VMware", "VirtualBox", "QEMU"]
          - id: "20"
            name: "Containers"
            description: "Lightweight, standalone, executable packages of software that include everything needed to run it: code, runtime, system tools, system libraries, and settings."
            examples: ["Docker", "containerd"]
          - id: "30"
            name: "Serverless Functions"
            description: "Event-driven, stateless compute functions that run in the cloud without requiring server management. They scale automatically and are billed based on execution time."
            examples: ["AWS Lambda", "Azure Functions"]
          - id: "40"
            name: "Bare Metal / Embedded Processors"
            description: "Directly running on physical hardware without a host OS or hypervisor. Common in embedded systems and high-performance computing for maximum control and low overhead."
            examples: ["Raspberry Pi", "Arduino", "ARM Cortex-M"]
          - id: "50"
            name: "Hardware Acceleration"
            description: "Specialized hardware (GPUs, FPGAs, ASICs) used to perform specific tasks more efficiently than a general-purpose CPU, often for graphics, AI, or scientific computing."
            examples: ["FPGA", "GPU", "ASIC"]
      - id: "02"
        name: "Networking"
        description: "Communication infrastructure. Defines protocols, virtual networks, firewalls, service discovery for microservices, and high-performance interconnects for specialized systems."
        items:
          - id: "10"
            name: "Network Protocols (TCP/IP, HTTP, MQTT)"
            description: "The rules and conventions for communication between network devices. Includes foundational protocols like TCP/IP and application-layer protocols like HTTP and MQTT."
            examples: ["TCP/IP", "HTTP", "WebSockets"]
          - id: "20"
            name: "Virtual Networks & Firewalls"
            description: "Software-defined networks (e.g., VPCs) that provide isolation and security, and firewalls that control incoming and outgoing network traffic based on security rules."
            examples: ["VPC", "iptables", "pf"]
          - id: "30"
            name: "Service Discovery & Mesh"
            description: "Mechanisms for services to find and communicate with each other in a distributed system. A service mesh adds reliability, security, and observability features."
            examples: ["Consul", "Istio", "Linkerd"]
          - id: "40"
            name: "Real-Time & HPC Interconnects"
            description: "High-bandwidth, low-latency networking technologies designed for demanding applications like high-performance computing (HPC), real-time systems, and data centers."
            examples: ["InfiniBand", "Time-Sensitive Networking (TSN)", "DDS"]
      - id: "03"
        name: "Runtime Environments"
        description: "The environment in which a program is executed. Includes language-specific runtimes, the underlying operating system, and hardware abstraction layers (HALs)."
        items:
          - id: "10"
            name: "Language Runtimes"
            description: "The environment that interprets or compiles code and manages its execution. Includes a virtual machine (e.g., JVM) or an interpreter (e.g., Python)."
            examples: ["JVM", "Node.js", "Python Interpreter"]
          - id: "20"
            name: "Operating Systems"
            description: "System software that manages computer hardware and software resources and provides common services for computer programs. Includes general-purpose and real-time OS (RTOS)."
            examples: ["Linux", "Windows", "RTOS"]
          - id: "30"
            name: "Hardware Abstraction Layers (HAL)"
            description: "An abstraction layer between a computer's physical hardware and its software. It provides a consistent interface for applications, hiding hardware-specific details."
            examples: ["CMSIS", "Android HAL"]
      - id: "04"
        name: "Orchestration & Management"
        description: "Tools for automating the deployment, management, scaling, and networking of containerized applications and infrastructure."
        items:
          - id: "10"
            name: "Container Orchestration"
            description: "Automates the deployment, scaling, and management of containerized applications. Manages the lifecycle of containers across a cluster of machines."
            examples: ["Kubernetes", "Amazon ECS", "Docker Swarm"]
          - id: "20"
            name: "Infrastructure Provisioning & IaC"
            description: "Managing and provisioning computer data centers through machine-readable definition files (Infrastructure as Code), rather than physical hardware configuration."
            examples: ["Terraform", "AWS CloudFormation", "Ansible"]
          - id: "30"
            name: "Cluster Management"
            description: "Software that manages a collection of computer servers (a cluster) as a single system, handling resource allocation, scheduling, and fault tolerance."
            examples: ["Apache Mesos", "HashiCorp Nomad"]
      - id: "05"
        name: "System Startup & Firmware"
        description: "Low-level software that initializes hardware during the boot process. Includes bootloaders, device drivers, and firmware update mechanisms."
        items:
          - id: "10"
            name: "Bootloaders"
            description: "The first software that runs when a device is powered on. It initializes the hardware and loads the operating system kernel into memory."
            examples: ["U-Boot", "GRUB", "Barebox"]
          - id: "20"
            name: "Device Drivers"
            description: "Software that allows the operating system to communicate with and control a specific hardware device, such as a network card, printer, or storage controller."
            examples: ["Linux Kernel Modules", "Peripheral Drivers (e.g., for CAN, I2C, SPI)"]
          - id: "30"
            name: "Firmware Update Agents"
            description: "Software components responsible for securely and reliably updating the firmware of a device, often over-the-air (OTA), to add features or patch vulnerabilities."
            examples: ["OTA Clients", "Secure Update Handlers"]
  - id: "S"
    name: "SYSTEM SERVICES"
    description: "This division includes cross-cutting concerns and supporting services that are not part of the core application logic."
    sections:
      - id: "01"
        name: "Security"
        description: "Ensures the confidentiality, integrity, and availability of the system. Covers authentication, authorization, cryptography, and threat detection."
        items:
          - id: "10"
            name: "Authentication Services"
            description: "Verify the identity of users or systems. Includes protocols like OAuth for delegated access and SSO for unified login."
            examples: ["OAuth", "SSO"]
          - id: "20"
            name: "Authorization & Permissions"
            description: "Define and enforce access control policies, determining what authenticated users are allowed to do. Includes RBAC and ACL models."
            examples: ["RBAC", "ACLs", "JWT Claims"]
          - id: "30"
            name: "Cryptography & Secrets Management"
            description: "Secure data at rest and in transit using encryption. Manages sensitive information like API keys and passwords through vaults."
            examples: ["AES", "RSA", "HashiCorp Vault"]
          - id: "40"
            name: "Anomaly & Threat Detection"
            description: "Monitor and analyze system activity to identify potential security threats, intrusions, or unusual behavior in real-time."
            examples: ["Snort", "Falco"]
      - id: "02"
        name: "Observability"
        description: "Provides insights into system behavior through logs, metrics, and traces, enabling debugging, monitoring, and performance analysis."
        items:
          - id: "10"
            name: "Logging"
            description: "Record discrete events from applications and infrastructure. Essential for debugging, auditing, and understanding system activity."
            examples: ["Log4j", "Winston", "Serilog"]
          - id: "20"
            name: "Metrics & Monitoring"
            description: "Collect and visualize numerical data over time to track system health, performance, and resource utilization."
            examples: ["Prometheus", "Grafana", "Datadog"]
          - id: "30"
            name: "Tracing & Performance Analysis"
            description: "Track requests as they flow through a distributed system, providing insights into latency, dependencies, and performance bottlenecks."
            examples: ["Jaeger", "Zipkin", "OpenTelemetry"]
      - id: "03"
        name: "Communication"
        description: "Mechanisms for data exchange between different parts of a system or between different systems."
        items:
          - id: "10"
            name: "Message Queues"
            description: "Enable asynchronous communication between services, decoupling senders and receivers and improving system resilience and scalability."
            examples: ["RabbitMQ", "SQS"]
          - id: "20"
            name: "Event Streams"
            description: "Handle real-time data streams for high-throughput, fault-tolerant processing. Used for event-driven architectures and data pipelines."
            examples: ["Kafka", "Kinesis"]
          - id: "30"
            name: "Inter-Process Communication (IPC)"
            description: "Mechanisms that allow different processes on the same machine to communicate and synchronize their actions."
            examples: ["Pipes", "Sockets", "Shared Memory"]
      - id: "04"
        name: "Utilities"
        description: "General-purpose supporting services that provide common functionalities across the application."
        items:
          - id: "10"
            name: "Configuration Management"
            description: "Manage and distribute application configuration data, allowing for dynamic updates and consistent settings across environments."
            examples: ["Consul", "etcd", "Spring Cloud Config"]
          - id: "20"
            name: "Scheduling & Background Jobs"
            description: "Execute tasks at specified times or intervals, or run long-running processes in the background without blocking the main application."
            examples: ["cron", "Celery", "Hangfire"]
          - id: "30"
            name: "Feature Flagging"
            description: "Enable or disable functionality dynamically without deploying new code, allowing for A/B testing, canary releases, and controlled rollouts."
            examples: ["LaunchDarkly", "Flagsmith"]
      - id: "05"
        name: "Memory Management"
        description: "Techniques for efficient allocation, usage, and freeing of memory resources."
        items:
          - id: "10"
            name: "Custom Memory Allocators"
            description: "Specialized allocators (e.g., pool, slab) designed to improve performance or reduce fragmentation for specific memory usage patterns."
            examples: ["Pool Allocators", "Slab Allocators"]
          - id: "20"
            name: "Garbage Collection Services"
            description: "Automated memory management that reclaims memory occupied by objects that are no longer in use by the program."
            examples: ["Generational GC", "Real-time GC"]
          - id: "30"
            name: "Memory Safety & Leak Detection"
            description: "Tools and techniques to prevent memory-related bugs like buffer overflows and to identify memory that is no longer used but not released."
            examples: ["Valgrind", "AddressSanitizer (ASan)", "Rust Borrow Checker"]
      - id: "06"
        name: "Concurrency & Synchronization"
        description: "Manages the simultaneous execution of multiple tasks and ensures safe access to shared resources."
        items:
          - id: "10"
            name: "Threading & Tasking Models"
            description: "Frameworks for managing concurrent execution, including thread pools for reusing threads and actor models for message-passing concurrency."
            examples: ["Thread Pools", "Actor Models", "Async/Await Runtimes"]
          - id: "20"
            name: "Synchronization Primitives"
            description: "Low-level mechanisms like mutexes and semaphores used to coordinate access to shared resources and prevent race conditions."
            examples: ["Mutexes", "Semaphores", "Atomics"]
          - id: "30"
            name: "Deadlock Detection & Prevention"
            description: "Algorithms and strategies to identify and resolve or prevent circular dependencies between threads waiting for resources."
            examples: ["Lock Ordering", "Wait-for Graph Analysis", "Banker's Algorithm"]
      - id: "07"
        name: "Fault Tolerance & Resilience"
        description: "Ensures the system remains operational despite failures. Includes health monitoring, redundancy, and graceful degradation."
        items:
          - id: "10"
            name: "Health Monitoring & Watchdogs"
            description: "Mechanisms that monitor the state of system components and can trigger recovery actions if a component becomes unresponsive."
            examples: ["Hardware Watchdog Timers", "Heartbeat Mechanisms", "Supervisor Daemons"]
          - id: "20"
            name: "Redundancy & Failover Management"
            description: "Systems that provide backup components (redundancy) and automatically switch to them (failover) when a primary component fails."
            examples: ["Active-Passive Failover", "Active-Active Load Balancing", "RAID Controllers"]
          - id: "30"
            name: "Graceful Degradation & Recovery Services"
            description: "Strategies that allow a system to continue operating at a reduced level of functionality during failures, rather than failing completely."
            examples: ["Circuit Breaker Pattern", "Load Shedding", "Safe Mode Operation"]
  - id: "C"
    name: "APPLICATION CORE"
    description: "This division contains the primary business logic, algorithms, and unique functional components of the software."
    sections:
      - id: "01"
        name: "Business Logic"
        description: "The core logic that encodes the real-world business rules and processes that the software is designed to automate."
        items:
          - id: "10"
            name: "Rules Engines"
            description: "Systems that externalize business logic from application code, allowing rules to be defined and managed independently."
            examples: ["Drools", "Jess"]
          - id: "20"
            name: "Domain Logic & Services (including adapters for 3rd-party logic)"
            description: "The implementation of the core business concepts, entities, and processes that define the application's primary function."
            examples: ["Business Services", "Domain Models", "Anti-corruption Layers"]
          - id: "30"
            name: "Workflow & Orchestration Logic"
            description: "Manages the sequence of tasks and interactions required to complete a business process, often spanning multiple services."
            examples: ["Camunda", "AWS Step Functions"]
      - id: "02"
        name: "Data Processing & Algorithms"
        description: "Core algorithms for transforming, analyzing, and processing data to generate insights or new information."
        items:
          - id: "10"
            name: "Search & Indexing Algorithms"
            description: "Algorithms for efficiently finding and retrieving information from large datasets by creating and querying optimized data structures (indexes)."
            examples: ["Elasticsearch", "Lucene", "TF-IDF"]
          - id: "20"
            name: "Machine Learning Models & Inference"
            description: "The use of statistical models to make predictions or decisions. Inference is the process of using a trained model to make predictions."
            examples: ["TensorFlow", "PyTorch", "scikit-learn"]
          - id: "30"
            name: "Signal & Image Processing"
            description: "Algorithms for analyzing, modifying, and synthesizing signals, such as audio, images, and sensor data."
            examples: ["OpenCV", "FFT", "Wavelets"]
          - id: "40"
            name: "Data Transformation & ETL Logic"
            description: "Processes for extracting data from sources, transforming it into a desired format, and loading it into a target system (Extract, Transform, Load)."
            examples: ["Apache Spark", "Pandas", "dbt"]
      - id: "03"
        name: "State Management"
        description: "Manages the state of the application, including user sessions and real-time data synchronization."
        items:
          - id: "10"
            name: "Application State"
            description: "The data that represents the current condition of the application, often managed in a centralized store in client-side applications."
            examples: ["Redux", "Vuex", "Recoil"]
          - id: "20"
            name: "Session Management"
            description: "The process of tracking a user's interaction with an application across multiple requests, typically using tokens or cookies."
            examples: ["JWT", "OAuth2 Sessions", "Cookie-based Sessions"]
          - id: "30"
            name: "Real-Time State Synchronization"
            description: "Ensuring that state is kept consistent across multiple clients or between client and server in real-time applications."
            examples: ["Firebase Realtime Database", "Socket.IO"]
      - id: "04"
        name: "Execution & Scheduling Models"
        description: "Defines how and when different parts of the code are executed, from real-time schedulers to event-driven models."
        items:
          - id: "10"
            name: "Real-Time Schedulers"
            description: "Scheduling algorithms used in real-time operating systems to ensure that tasks meet their deadlines."
            examples: ["Rate-Monotonic", "Earliest Deadline First"]
          - id: "20"
            name: "Event-Driven & Reactive Models"
            description: "Architectural patterns where the flow of the program is determined by events, such as user actions or messages from other services."
            examples: ["Reactor Pattern", "Proactor Pattern", "ReactiveX"]
          - id: "30"
            name: "Control Loops & Cyclic Executives"
            description: "A common model in embedded systems where a main loop continuously runs, executing a fixed set of tasks in a repeating cycle."
            examples: ["Main Loop", "Fixed-Period Schedulers"]
          - id: "40"
            name: "Behavior Trees & State Machines"
            description: "Models for representing and controlling the flow of logic, commonly used in AI, robotics, and game development."
            examples: ["FSMs", "Behavior Trees"]
      - id: "05"
        name: "Resource Management Logic"
        description: "Logic for allocating and managing system resources like bandwidth, CPU, and power."
        items:
          - id: "10"
            name: "Resource Reservation & Admission Control"
            description: "Mechanisms to reserve resources for specific tasks and to control access to resources to prevent overload."
            examples: ["Token Bucket Algorithm", "Semaphore-based Limiting"]
          - id: "20"
            name: "Quality of Service (QoS) Management"
            description: "Techniques for managing network traffic and other resources to ensure a certain level of performance for critical applications."
            examples: ["Traffic Shaping", "Priority Queues"]
          - id: "30"
            name: "Power Management Logic"
            description: "Algorithms and strategies for optimizing power consumption, especially in battery-powered or embedded devices."
            examples: ["CPU Throttling", "Sleep Modes"]
      - id: "06"
        name: "Time & Synchronization Logic"
        description: "Manages time within the system, including synchronization with external time sources and logical clocks."
        items:
          - id: "10"
            name: "Time Source Management"
            description: "Managing and synchronizing the system clock with external, accurate time sources like NTP or GPS."
            examples: ["NTP Clients", "PTP Stacks", "GPSD"]
          - id: "20"
            name: "Logical Clocks & Timestamping"
            description: "Algorithms for ordering events in a distributed system without relying on a single, global clock."
            examples: ["Lamport Timestamps", "Vector Clocks"]
          - id: "30"
            name: "Time-Triggered Logic"
            description: "A model where actions are triggered at predetermined points in time, common in safety-critical and real-time systems."
            examples: ["Time-Triggered Architectures (TTA)"]
  - id: "I"
    name: "INTERFACES"
    description: "This division covers all components related to interaction with users, devices, or other software systems."
    sections:
      - id: "01"
        name: "Graphical User Interfaces (GUI)"
        description: "Visual interfaces that allow users to interact with the software through graphical icons and visual indicators."
        items:
          - id: "10"
            name: "Desktop Application Windows"
            description: "The native windows and widgets of a desktop operating system's GUI framework."
            examples: ["WinForms", "Cocoa"]
          - id: "20"
            name: "Web Interfaces (HTML, CSS, Web Components)"
            description: "User interfaces built with web technologies that run in a web browser."
            examples: ["React", "Vue", "Angular", "Lit"]
          - id: "30"
            name: "Mobile Application Screens (iOS/Android native UI)"
            description: "The native screens and UI components of mobile operating systems like iOS and Android."
            examples: ["SwiftUI", "Jetpack Compose"]
      - id: "02"
        name: "Non-Graphical Human Interfaces"
        description: "Interfaces that allow human interaction without a graphical display, such as command-line, voice, or haptic feedback."
        items:
          - id: "10"
            name: "Command Line Interfaces (CLI)"
            description: "Text-based interfaces used to run programs, manage computer files, and interact with the system."
            examples: ["argparse", "Cobra", "oclif"]
          - id: "20"
            name: "Voice User Interfaces (VUI)"
            description: "Interfaces that allow users to interact with a system using voice commands."
            examples: ["Alexa Skills", "Google Actions"]
          - id: "30"
            name: "Text-Based User Interfaces (TUI)"
            description: "Interfaces that use text, symbols, and colors in a terminal environment to create a user interface."
            examples: ["ncurses", "Rich", "Bubble Tea"]
          - id: "40"
            name: "Haptic & Tactile Interfaces"
            description: "Interfaces that provide feedback to the user through the sense of touch, such as vibrations or force feedback."
            examples: ["Core Haptics", "Vibration API"]
      - id: "03"
        name: "Programmatic Interfaces (API)"
        description: "Interfaces that allow different software components or systems to communicate with each other."
        items:
          - id: "10"
            name: "REST APIs"
            description: "An architectural style for designing networked applications, using a stateless, client-server communication model based on HTTP."
            examples: ["OpenAPI (Swagger)", "RAML"]
          - id: "20"
            name: "GraphQL APIs"
            description: "A query language for APIs and a runtime for fulfilling those queries with your existing data. It gives clients the power to ask for exactly what they need."
            examples: ["Apollo", "Relay"]
          - id: "30"
            name: "gRPC / RPC Endpoints"
            description: "A high-performance, open-source universal RPC framework. gRPC is based on defining a service, specifying the methods that can be called remotely with their parameters and return types."
            examples: ["Protocol Buffers", "Thrift"]
          - id: "40"
            name: "Library APIs / SDKs (Provided by this system)"
            description: "A set of tools, libraries, and documentation provided by this system to allow other developers to build applications that interact with it."
            examples: ["C++ SDK", "Python SDK", "Java SDK"]
          - id: "50"
            name: "External API Interfaces (Consumed by this system)"
            description: "Interfaces that this system uses to communicate with and consume services from third-party systems."
            examples: ["Stripe API", "Twilio API"]
      - id: "04"
        name: "Hardware & Sensor Interfaces"
        description: "Interfaces for interacting with physical hardware, sensors, and actuators."
        items:
          - id: "10"
            name: "General Purpose Input/Output (GPIO)"
            description: "A generic pin on an integrated circuit whose behavior can be controlled by the user at run time."
            examples: ["libgpiod", "RPi.GPIO"]
          - id: "20"
            name: "Sensor Data Ingestion"
            description: "The process of collecting and importing data from various sensors for storage and analysis."
            examples: ["accelerometer", "GPS"]
          - id: "30"
            name: "Actuator Control"
            description: "The control of mechanical or electrical devices that perform a physical action, such as motors, valves, or switches."
            examples: ["PWM Servo Control", "Stepper Motor Drivers"]
  - id: "N"
    name: "DISTRIBUTION & PACKAGING"
    description: "This division defines the final form of the software product as delivered to the end-user or system."
    sections:
      - id: "01"
        name: "Packaged & Deployed Artifacts"
        description: "The final form of the software as a distributable or deployable unit. Includes installers, container images, firmware, and reusable libraries for consumption by end-users or other systems."
        items:
          - id: "10"
            name: "Desktop Installers"
            description: "Packages used to install software on desktop operating systems, such as MSI for Windows, DMG for macOS, and .deb for Debian-based Linux."
            examples: ["MSI", "DMG", ".deb"]
          - id: "20"
            name: "Mobile App Bundles"
            description: "The package format used to distribute and install mobile applications, such as APK for Android and IPA for iOS."
            examples: ["APK", "IPA"]
          - id: "30"
            name: "Container Images"
            description: "A lightweight, standalone, executable package of software that includes everything needed to run an application."
            examples: ["Docker Image"]
          - id: "40"
            name: "Firmware Images"
            description: "A file that contains the complete contents and structure of a device's firmware, used for flashing or updating the device."
            examples: [".bin", ".hex"]
          - id: "50"
            name: "Web Application Builds (e.g., static assets)"
            description: "The compiled and optimized static files (HTML, CSS, JavaScript) that make up a web application, ready for deployment."
            examples: ["Webpack build", "Vite build"]
          - id: "60"
            name: "Published Packages"
            description: "Libraries published to a public or private package registry (e.g., npm, PyPI, Maven) for easy consumption by other developers."
            examples: ["to npm", "PyPI", "Maven"]
          - id: "70"
            name: "Shared Libraries"
            description: "Libraries that are loaded by programs when they start. They are shared among multiple programs, saving memory and disk space."
            examples: [".dll", ".so"]